@todo 3 "too much garbage collection for gmm"

function GMMMoment1!( 
    mom         :: A1{T},
    momdŒ∏       :: HType{T},
    momdŒ¥       :: HType{T},
    Œ∏           :: A1{T},
    Œ¥           :: A1{T},
    d           :: GrumpsMicroData{T},
    ùí¶m          :: AA2{T},
    o           :: OptimizationOptions,
    s           :: GrumpsMicroSpace{T}
) where {T<:Flt}

    # s,d = ms.microspace, md.microdata
    weights, consumers, products, insides, parameters = RSJ( d )
    dŒ∏z, dŒ∏ŒΩ, dŒ∏, J, dŒ¥, S = dimŒ∏z( d ), dimŒ∏ŒΩ( d ), dimŒ∏( d ), dimJ( d ), dimŒ¥( d ), dimS( d )


    B = d.‚Ñ≥               # instruments
    dmomb, dmomk = size( B, 3 ), size( ùí¶m, 2 )
    dmom = dmomb + dmomk

    @ensure dmom == size( mom, 1 )   "mismatch of the number of moments"


    moments, bmoments, kmoments = 1:dmom, 1:dmomb, 1:dmomk
 
    ChoiceProbabilities!( s, d, o, Œ¥ ) 

    œÄij = zeros( T, consumers[end], products[end] )
    @threads :dynamic for i ‚àà consumers
        for j ‚àà products
            œÄij[i,j] = sum( d.w[r] * s.œÄrij[r,i,j] for r ‚àà weights )
        end
    end


    # first fill the moments
    mom .= zero( T )     
    @threads :dynamic for Œº ‚àà bmoments
        mom[ Œº ] = sum( ( d.Y[i,j] - œÄij[i,j] ) * B[i,j,Œº] for i ‚àà consumers, j ‚àà insides )
    end
    for Œº ‚àà kmoments
        mom[ dmomb + Œº ] = dot( ùí¶m[:,Œº], Œ¥ )
    end

    
    if momdŒ∏ == nothing && momdŒ¥ == nothing
        return nothing
    end

    Œîb =  zeros( T, J, dŒ∏ )

    if momdŒ∏ ‚â† nothing
        momdŒ∏ .= zero( T )
        for i ‚àà consumers, r ‚àà weights
            ComputeŒîb!( Œîb, s, d, o, r, i )
            for Œº ‚àà bmoments, v ‚àà parameters, j ‚àà insides
                momdŒ∏[ Œº, v ] -=  d.w[r] * s.œÄrij[r,i,j] * B[i,j,Œº] * Œîb[j,v] 
            end
        end
        # no derivatives of macro moments with respect to Œ∏            
    end

    if momdŒ¥ == nothing
        return nothing
    end

    momdŒ¥ .= zero( T )
    @threads :dynamic for Œº ‚àà bmoments
        for k ‚àà insides
            for i ‚àà consumers
                momdŒ¥[Œº,k] -= ( B[i,k,Œº] * œÄij[ i, k ] -
                   sum( d.w[r] * s.œÄrij[r,i,j] * s.œÄrij[r,i,k] * B[i,j,Œº] for j ‚àà insides, r ‚àà weights ) )
            end
        end
    end

    momdŒ¥[dmomb+1:end,:] +=   ùí¶m'  

    return nothing
end



function OutsideMoment1!(  
    fgh         :: GMMMarketFGH{T}, 
    Œ∏           :: A1{T}, 
    Œ¥           :: A1{T}, 
    e           :: GrumpsGMM, 
    d           :: GrumpsMarketData{T}, 
    ùí¶m          :: AA2{T}, 
    o           :: OptimizationOptions, 
    ms          :: GrumpsMarketSpace{T}, 
    computeF    :: Bool, 
    computeG    :: Bool 
    ) where {T<:Flt}

     return GMMMoment1!( 
        fgh.mom,  
        grif( computeG, fgh.momdŒ∏ ),
        grif( computeG, fgh.momdŒ¥ ),
        Œ∏,
        Œ¥,
        d.microdata,
        ùí¶m,
        o,
        ms.microspace
        )

end