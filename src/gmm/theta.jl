function GMMMoment1!( 
    mom         :: A1{T},
    momdŒ∏       :: HType{T},
    momdŒ¥       :: HType{T},
    Œ∏           :: A1{T},
    Œ¥           :: A1{T},
    d           :: GrumpsMarketData{T},
    ùí¶m          :: AA2{T},
    o           :: OptimizationOptions,
    ms          :: GrumpsMarketSpace{T}
) where {T<:Flt}

    weights, consumers, products, insides, parameters = RSJ( d )
    demographics = 1:dimŒ∏z( d )
    rancos = 1:dimŒ∏ŒΩ( d )

    B = d.microdata.‚Ñ≥               # instruments
    dmomb, dmomk = size( B, 3 ), size( ùí¶m, 2 )
    dmom = dmomb + dmomk
    @ensure dmom == size( mom, 1 )   "mismatch of the number of moments"
    moments, bmoments, kmoments = 1:dmom, 1:dmomb, 1:dmomk
 
    ChoiceProbabilities!( s, d, o, Œ¥ ) 

    œÄij = zeros( T, consumers[end], products[end] )
    @threads :dynamic for i ‚àà consumers, j ‚àà products
        œÄij[i,j] = sum( d.w[r] * s.œÄrij[r,i,j] for r ‚àà weights )
    end

    # first fill the moments
    mom .= zero( T )     
    @threads :dynamic for Œº ‚àà bmoments
        mom[ Œº ] = sum( ( d.Y[i,j] - œÄij[i,j] ) * B[i,j,Œº] for i ‚àà consumers, j ‚àà products )
    end
    for Œº ‚àà kmoments
        mom[ dmomb + Œº ] = dot( ùí¶m[:,Œº], Œ¥ )
    end

    
    if momdŒ∏ == nothing && momdŒ¥ == nothing
        return nothing
    end

    Œîb =  ùìèùìà( T, J, dŒ∏ )

    if momdŒ∏ ‚â† nothing
        momdŒ∏ .= zero( T )
        for i ‚àà consumers, r ‚àà weights
            ComputeŒîb!( Œîb, s, d, o, r, i )
            for Œº ‚àà bmoments, v ‚àà demographics
                momdŒ∏[ Œº, v ] -=  w[r] * sum( œÄrij[r,i,j] * B[i,j,Œº] * Œîb[j,v] for j ‚àà products )
            end
        end
        # no derivatives of macro moments with respect to Œ∏            
    end

    if momdŒ¥ == nothing
        return nothing
    end

    momdŒ¥ .= zero( T )
    Œ£œÄœÄ = [ sum( d.w[r] * s.œÄrij[r,i,j] * s.œÄ[r,i,k] for r ‚àà weights ) for i ‚àà consumers, j ‚àà products, k ‚àà products ]
    @threads :dynamic for Œº ‚àà moments, k ‚àà insides
        for i ‚àà consumers
            momdŒ¥[Œº,k] -= B[i,k,Œº] * œÄij[ i, k ] - sum( Œ£œÄœÄ[ i, j, k ] * B[i,j,Œº] for j ‚àà products )
        end
    end

    return nothing
end



function OutsideMoment1!(  
    fgh         :: GMMMarketFGH{T}, 
    Œ∏           :: A1{T}, 
    Œ¥           :: A1{T}, 
    e           :: GrumpsGMM, 
    d           :: GrumpsMarketData{T}, 
    ùí¶m          :: AA2{T}, 
    o           :: OptimizationOptions, 
    ms          :: GrumpsMarketSpace{T}, 
    computeF    :: Bool, 
    computeG    :: Bool 
    )

    return GMMMoment1!( 
        fgh.mom,  
        grif( computeG || computeH, fgh.momdŒ∏ ),
        grif( computeG || computeH, fgh.momdŒ¥ ),
        Œ∏,
        Œ¥,
        d,
        ùí¶m,
        o,
        ms
        )

end